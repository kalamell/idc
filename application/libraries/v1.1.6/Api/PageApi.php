<?php
/**
 * PageApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Thai-IDC
 *
 * What's new<br> 1. Add API Get page by id <br> 2. Add API Portfolio <br> 3. Add API Article <br> 4. Add API Idea
 *
 * OpenAPI spec version: v1.1.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * PageApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PageApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createPage
     *
     * Create Page
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  \Swagger\Client\Model\PageRequest $body body (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SuccessResponse
     */
    public function createPage($platform, $x_access_token, $x_user, $body, $lang = 'th')
    {
        list($response) = $this->createPageWithHttpInfo($platform, $x_access_token, $x_user, $body, $lang);
        return $response;
    }

    /**
     * Operation createPageWithHttpInfo
     *
     * Create Page
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  \Swagger\Client\Model\PageRequest $body (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SuccessResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPageWithHttpInfo($platform, $x_access_token, $x_user, $body, $lang = 'th')
    {
        $returnType = '\Swagger\Client\Model\SuccessResponse';
        $request = $this->createPageRequest($platform, $x_access_token, $x_user, $body, $lang);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SuccessResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\NotAuthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SystemError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createPageAsync
     *
     * Create Page
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  \Swagger\Client\Model\PageRequest $body (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPageAsync($platform, $x_access_token, $x_user, $body, $lang = 'th')
    {
        return $this->createPageAsyncWithHttpInfo($platform, $x_access_token, $x_user, $body, $lang)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createPageAsyncWithHttpInfo
     *
     * Create Page
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  \Swagger\Client\Model\PageRequest $body (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPageAsyncWithHttpInfo($platform, $x_access_token, $x_user, $body, $lang = 'th')
    {
        $returnType = '\Swagger\Client\Model\SuccessResponse';
        $request = $this->createPageRequest($platform, $x_access_token, $x_user, $body, $lang);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createPage'
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  \Swagger\Client\Model\PageRequest $body (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createPageRequest($platform, $x_access_token, $x_user, $body, $lang = 'th')
    {
        // verify the required parameter 'platform' is set
        if ($platform === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $platform when calling createPage'
            );
        }
        // verify the required parameter 'x_access_token' is set
        if ($x_access_token === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_access_token when calling createPage'
            );
        }
        // verify the required parameter 'x_user' is set
        if ($x_user === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user when calling createPage'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createPage'
            );
        }

        $resourcePath = '/pages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($platform !== null) {
            $headerParams['platform'] = ObjectSerializer::toHeaderValue($platform);
        }
        // header params
        if ($x_access_token !== null) {
            $headerParams['x-access-token'] = ObjectSerializer::toHeaderValue($x_access_token);
        }
        // header params
        if ($x_user !== null) {
            $headerParams['x-user'] = ObjectSerializer::toHeaderValue($x_user);
        }
        // header params
        if ($lang !== null) {
            $headerParams['lang'] = ObjectSerializer::toHeaderValue($lang);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deletePage
     *
     * Delete Page
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  \Swagger\Client\Model\Body3 $body body (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SuccessResponse
     */
    public function deletePage($platform, $x_access_token, $x_user, $body, $lang = 'th')
    {
        list($response) = $this->deletePageWithHttpInfo($platform, $x_access_token, $x_user, $body, $lang);
        return $response;
    }

    /**
     * Operation deletePageWithHttpInfo
     *
     * Delete Page
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  \Swagger\Client\Model\Body3 $body (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SuccessResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePageWithHttpInfo($platform, $x_access_token, $x_user, $body, $lang = 'th')
    {
        $returnType = '\Swagger\Client\Model\SuccessResponse';
        $request = $this->deletePageRequest($platform, $x_access_token, $x_user, $body, $lang);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SuccessResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\NotAuthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SystemError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deletePageAsync
     *
     * Delete Page
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  \Swagger\Client\Model\Body3 $body (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePageAsync($platform, $x_access_token, $x_user, $body, $lang = 'th')
    {
        return $this->deletePageAsyncWithHttpInfo($platform, $x_access_token, $x_user, $body, $lang)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deletePageAsyncWithHttpInfo
     *
     * Delete Page
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  \Swagger\Client\Model\Body3 $body (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePageAsyncWithHttpInfo($platform, $x_access_token, $x_user, $body, $lang = 'th')
    {
        $returnType = '\Swagger\Client\Model\SuccessResponse';
        $request = $this->deletePageRequest($platform, $x_access_token, $x_user, $body, $lang);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deletePage'
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  \Swagger\Client\Model\Body3 $body (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deletePageRequest($platform, $x_access_token, $x_user, $body, $lang = 'th')
    {
        // verify the required parameter 'platform' is set
        if ($platform === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $platform when calling deletePage'
            );
        }
        // verify the required parameter 'x_access_token' is set
        if ($x_access_token === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_access_token when calling deletePage'
            );
        }
        // verify the required parameter 'x_user' is set
        if ($x_user === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user when calling deletePage'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling deletePage'
            );
        }

        $resourcePath = '/pages/delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($platform !== null) {
            $headerParams['platform'] = ObjectSerializer::toHeaderValue($platform);
        }
        // header params
        if ($x_access_token !== null) {
            $headerParams['x-access-token'] = ObjectSerializer::toHeaderValue($x_access_token);
        }
        // header params
        if ($x_user !== null) {
            $headerParams['x-user'] = ObjectSerializer::toHeaderValue($x_user);
        }
        // header params
        if ($lang !== null) {
            $headerParams['lang'] = ObjectSerializer::toHeaderValue($lang);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMyPage
     *
     * Get my page
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PageResponse
     */
    public function getMyPage($platform, $x_access_token, $x_user, $lang = 'th')
    {
        list($response) = $this->getMyPageWithHttpInfo($platform, $x_access_token, $x_user, $lang);
        return $response;
    }

    /**
     * Operation getMyPageWithHttpInfo
     *
     * Get my page
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMyPageWithHttpInfo($platform, $x_access_token, $x_user, $lang = 'th')
    {
        $returnType = '\Swagger\Client\Model\PageResponse';
        $request = $this->getMyPageRequest($platform, $x_access_token, $x_user, $lang);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PageResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\NotAuthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SystemError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMyPageAsync
     *
     * Get my page
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMyPageAsync($platform, $x_access_token, $x_user, $lang = 'th')
    {
        return $this->getMyPageAsyncWithHttpInfo($platform, $x_access_token, $x_user, $lang)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMyPageAsyncWithHttpInfo
     *
     * Get my page
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMyPageAsyncWithHttpInfo($platform, $x_access_token, $x_user, $lang = 'th')
    {
        $returnType = '\Swagger\Client\Model\PageResponse';
        $request = $this->getMyPageRequest($platform, $x_access_token, $x_user, $lang);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMyPage'
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMyPageRequest($platform, $x_access_token, $x_user, $lang = 'th')
    {
        // verify the required parameter 'platform' is set
        if ($platform === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $platform when calling getMyPage'
            );
        }
        // verify the required parameter 'x_access_token' is set
        if ($x_access_token === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_access_token when calling getMyPage'
            );
        }
        // verify the required parameter 'x_user' is set
        if ($x_user === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user when calling getMyPage'
            );
        }

        $resourcePath = '/pages/me';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($platform !== null) {
            $headerParams['platform'] = ObjectSerializer::toHeaderValue($platform);
        }
        // header params
        if ($x_access_token !== null) {
            $headerParams['x-access-token'] = ObjectSerializer::toHeaderValue($x_access_token);
        }
        // header params
        if ($x_user !== null) {
            $headerParams['x-user'] = ObjectSerializer::toHeaderValue($x_user);
        }
        // header params
        if ($lang !== null) {
            $headerParams['lang'] = ObjectSerializer::toHeaderValue($lang);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMyPageById
     *
     * Get my page by id
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  string $page_id pageId is _id of Page Object (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PageResponse
     */
    public function getMyPageById($platform, $x_access_token, $x_user, $page_id, $lang = 'th')
    {
        list($response) = $this->getMyPageByIdWithHttpInfo($platform, $x_access_token, $x_user, $page_id, $lang);
        return $response;
    }

    /**
     * Operation getMyPageByIdWithHttpInfo
     *
     * Get my page by id
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  string $page_id pageId is _id of Page Object (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMyPageByIdWithHttpInfo($platform, $x_access_token, $x_user, $page_id, $lang = 'th')
    {
        $returnType = '\Swagger\Client\Model\PageResponse';
        $request = $this->getMyPageByIdRequest($platform, $x_access_token, $x_user, $page_id, $lang);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PageResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\NotAuthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SystemError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMyPageByIdAsync
     *
     * Get my page by id
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  string $page_id pageId is _id of Page Object (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMyPageByIdAsync($platform, $x_access_token, $x_user, $page_id, $lang = 'th')
    {
        return $this->getMyPageByIdAsyncWithHttpInfo($platform, $x_access_token, $x_user, $page_id, $lang)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMyPageByIdAsyncWithHttpInfo
     *
     * Get my page by id
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  string $page_id pageId is _id of Page Object (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMyPageByIdAsyncWithHttpInfo($platform, $x_access_token, $x_user, $page_id, $lang = 'th')
    {
        $returnType = '\Swagger\Client\Model\PageResponse';
        $request = $this->getMyPageByIdRequest($platform, $x_access_token, $x_user, $page_id, $lang);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMyPageById'
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  string $page_id pageId is _id of Page Object (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMyPageByIdRequest($platform, $x_access_token, $x_user, $page_id, $lang = 'th')
    {
        // verify the required parameter 'platform' is set
        if ($platform === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $platform when calling getMyPageById'
            );
        }
        // verify the required parameter 'x_access_token' is set
        if ($x_access_token === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_access_token when calling getMyPageById'
            );
        }
        // verify the required parameter 'x_user' is set
        if ($x_user === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user when calling getMyPageById'
            );
        }
        // verify the required parameter 'page_id' is set
        if ($page_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_id when calling getMyPageById'
            );
        }

        $resourcePath = '/pages/me/{pageId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($platform !== null) {
            $headerParams['platform'] = ObjectSerializer::toHeaderValue($platform);
        }
        // header params
        if ($x_access_token !== null) {
            $headerParams['x-access-token'] = ObjectSerializer::toHeaderValue($x_access_token);
        }
        // header params
        if ($x_user !== null) {
            $headerParams['x-user'] = ObjectSerializer::toHeaderValue($x_user);
        }
        // header params
        if ($lang !== null) {
            $headerParams['lang'] = ObjectSerializer::toHeaderValue($lang);
        }

        // path params
        if ($page_id !== null) {
            $resourcePath = str_replace(
                '{' . 'pageId' . '}',
                ObjectSerializer::toPathValue($page_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPage
     *
     * Get page by id
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  string $page_id pageId is _id of Page Object (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PageResponse
     */
    public function getPage($platform, $x_access_token, $x_user, $page_id, $lang = 'th')
    {
        list($response) = $this->getPageWithHttpInfo($platform, $x_access_token, $x_user, $page_id, $lang);
        return $response;
    }

    /**
     * Operation getPageWithHttpInfo
     *
     * Get page by id
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  string $page_id pageId is _id of Page Object (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPageWithHttpInfo($platform, $x_access_token, $x_user, $page_id, $lang = 'th')
    {
        $returnType = '\Swagger\Client\Model\PageResponse';
        $request = $this->getPageRequest($platform, $x_access_token, $x_user, $page_id, $lang);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PageResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\NotAuthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SystemError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPageAsync
     *
     * Get page by id
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  string $page_id pageId is _id of Page Object (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPageAsync($platform, $x_access_token, $x_user, $page_id, $lang = 'th')
    {
        return $this->getPageAsyncWithHttpInfo($platform, $x_access_token, $x_user, $page_id, $lang)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPageAsyncWithHttpInfo
     *
     * Get page by id
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  string $page_id pageId is _id of Page Object (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPageAsyncWithHttpInfo($platform, $x_access_token, $x_user, $page_id, $lang = 'th')
    {
        $returnType = '\Swagger\Client\Model\PageResponse';
        $request = $this->getPageRequest($platform, $x_access_token, $x_user, $page_id, $lang);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPage'
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  string $page_id pageId is _id of Page Object (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPageRequest($platform, $x_access_token, $x_user, $page_id, $lang = 'th')
    {
        // verify the required parameter 'platform' is set
        if ($platform === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $platform when calling getPage'
            );
        }
        // verify the required parameter 'x_access_token' is set
        if ($x_access_token === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_access_token when calling getPage'
            );
        }
        // verify the required parameter 'x_user' is set
        if ($x_user === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user when calling getPage'
            );
        }
        // verify the required parameter 'page_id' is set
        if ($page_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_id when calling getPage'
            );
        }

        $resourcePath = '/pages/{pageId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($platform !== null) {
            $headerParams['platform'] = ObjectSerializer::toHeaderValue($platform);
        }
        // header params
        if ($x_access_token !== null) {
            $headerParams['x-access-token'] = ObjectSerializer::toHeaderValue($x_access_token);
        }
        // header params
        if ($x_user !== null) {
            $headerParams['x-user'] = ObjectSerializer::toHeaderValue($x_user);
        }
        // header params
        if ($lang !== null) {
            $headerParams['lang'] = ObjectSerializer::toHeaderValue($lang);
        }

        // path params
        if ($page_id !== null) {
            $resourcePath = str_replace(
                '{' . 'pageId' . '}',
                ObjectSerializer::toPathValue($page_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePage
     *
     * Update Page
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  \Swagger\Client\Model\PageRequest $body body (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SuccessResponse
     */
    public function updatePage($platform, $x_access_token, $x_user, $body, $lang = 'th')
    {
        list($response) = $this->updatePageWithHttpInfo($platform, $x_access_token, $x_user, $body, $lang);
        return $response;
    }

    /**
     * Operation updatePageWithHttpInfo
     *
     * Update Page
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  \Swagger\Client\Model\PageRequest $body (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SuccessResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePageWithHttpInfo($platform, $x_access_token, $x_user, $body, $lang = 'th')
    {
        $returnType = '\Swagger\Client\Model\SuccessResponse';
        $request = $this->updatePageRequest($platform, $x_access_token, $x_user, $body, $lang);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SuccessResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\NotAuthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SystemError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updatePageAsync
     *
     * Update Page
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  \Swagger\Client\Model\PageRequest $body (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePageAsync($platform, $x_access_token, $x_user, $body, $lang = 'th')
    {
        return $this->updatePageAsyncWithHttpInfo($platform, $x_access_token, $x_user, $body, $lang)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updatePageAsyncWithHttpInfo
     *
     * Update Page
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  \Swagger\Client\Model\PageRequest $body (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePageAsyncWithHttpInfo($platform, $x_access_token, $x_user, $body, $lang = 'th')
    {
        $returnType = '\Swagger\Client\Model\SuccessResponse';
        $request = $this->updatePageRequest($platform, $x_access_token, $x_user, $body, $lang);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updatePage'
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  \Swagger\Client\Model\PageRequest $body (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updatePageRequest($platform, $x_access_token, $x_user, $body, $lang = 'th')
    {
        // verify the required parameter 'platform' is set
        if ($platform === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $platform when calling updatePage'
            );
        }
        // verify the required parameter 'x_access_token' is set
        if ($x_access_token === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_access_token when calling updatePage'
            );
        }
        // verify the required parameter 'x_user' is set
        if ($x_user === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user when calling updatePage'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updatePage'
            );
        }

        $resourcePath = '/pages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($platform !== null) {
            $headerParams['platform'] = ObjectSerializer::toHeaderValue($platform);
        }
        // header params
        if ($x_access_token !== null) {
            $headerParams['x-access-token'] = ObjectSerializer::toHeaderValue($x_access_token);
        }
        // header params
        if ($x_user !== null) {
            $headerParams['x-user'] = ObjectSerializer::toHeaderValue($x_user);
        }
        // header params
        if ($lang !== null) {
            $headerParams['lang'] = ObjectSerializer::toHeaderValue($lang);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
