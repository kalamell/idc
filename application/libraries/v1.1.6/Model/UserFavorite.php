<?php
/**
 * UserFavorite
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Thai-IDC
 *
 * What's new<br> 1. Add API Get page by id <br> 2. Add API Portfolio <br> 3. Add API Article <br> 4. Add API Idea
 *
 * OpenAPI spec version: v1.1.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * UserFavorite Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UserFavorite implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UserFavorite';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'designers' => '\Swagger\Client\Model\Designer[]',
        'knowledges' => '\Swagger\Client\Model\Knowledge[]',
        'videos' => '\Swagger\Client\Model\Knowledge[]',
        'trains' => '\Swagger\Client\Model\Knowledge[]',
        'producers' => '\Swagger\Client\Model\Product[]',
        'suppliers' => '\Swagger\Client\Model\Product[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'designers' => null,
        'knowledges' => null,
        'videos' => null,
        'trains' => null,
        'producers' => null,
        'suppliers' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'designers' => 'designers',
        'knowledges' => 'knowledges',
        'videos' => 'videos',
        'trains' => 'trains',
        'producers' => 'producers',
        'suppliers' => 'suppliers'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'designers' => 'setDesigners',
        'knowledges' => 'setKnowledges',
        'videos' => 'setVideos',
        'trains' => 'setTrains',
        'producers' => 'setProducers',
        'suppliers' => 'setSuppliers'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'designers' => 'getDesigners',
        'knowledges' => 'getKnowledges',
        'videos' => 'getVideos',
        'trains' => 'getTrains',
        'producers' => 'getProducers',
        'suppliers' => 'getSuppliers'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['designers'] = isset($data['designers']) ? $data['designers'] : null;
        $this->container['knowledges'] = isset($data['knowledges']) ? $data['knowledges'] : null;
        $this->container['videos'] = isset($data['videos']) ? $data['videos'] : null;
        $this->container['trains'] = isset($data['trains']) ? $data['trains'] : null;
        $this->container['producers'] = isset($data['producers']) ? $data['producers'] : null;
        $this->container['suppliers'] = isset($data['suppliers']) ? $data['suppliers'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets designers
     *
     * @return \Swagger\Client\Model\Designer[]
     */
    public function getDesigners()
    {
        return $this->container['designers'];
    }

    /**
     * Sets designers
     *
     * @param \Swagger\Client\Model\Designer[] $designers designers
     *
     * @return $this
     */
    public function setDesigners($designers)
    {
        $this->container['designers'] = $designers;

        return $this;
    }

    /**
     * Gets knowledges
     *
     * @return \Swagger\Client\Model\Knowledge[]
     */
    public function getKnowledges()
    {
        return $this->container['knowledges'];
    }

    /**
     * Sets knowledges
     *
     * @param \Swagger\Client\Model\Knowledge[] $knowledges knowledges
     *
     * @return $this
     */
    public function setKnowledges($knowledges)
    {
        $this->container['knowledges'] = $knowledges;

        return $this;
    }

    /**
     * Gets videos
     *
     * @return \Swagger\Client\Model\Knowledge[]
     */
    public function getVideos()
    {
        return $this->container['videos'];
    }

    /**
     * Sets videos
     *
     * @param \Swagger\Client\Model\Knowledge[] $videos videos
     *
     * @return $this
     */
    public function setVideos($videos)
    {
        $this->container['videos'] = $videos;

        return $this;
    }

    /**
     * Gets trains
     *
     * @return \Swagger\Client\Model\Knowledge[]
     */
    public function getTrains()
    {
        return $this->container['trains'];
    }

    /**
     * Sets trains
     *
     * @param \Swagger\Client\Model\Knowledge[] $trains trains
     *
     * @return $this
     */
    public function setTrains($trains)
    {
        $this->container['trains'] = $trains;

        return $this;
    }

    /**
     * Gets producers
     *
     * @return \Swagger\Client\Model\Product[]
     */
    public function getProducers()
    {
        return $this->container['producers'];
    }

    /**
     * Sets producers
     *
     * @param \Swagger\Client\Model\Product[] $producers producers
     *
     * @return $this
     */
    public function setProducers($producers)
    {
        $this->container['producers'] = $producers;

        return $this;
    }

    /**
     * Gets suppliers
     *
     * @return \Swagger\Client\Model\Product[]
     */
    public function getSuppliers()
    {
        return $this->container['suppliers'];
    }

    /**
     * Sets suppliers
     *
     * @param \Swagger\Client\Model\Product[] $suppliers suppliers
     *
     * @return $this
     */
    public function setSuppliers($suppliers)
    {
        $this->container['suppliers'] = $suppliers;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


