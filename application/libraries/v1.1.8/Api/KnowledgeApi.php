<?php
/**
 * KnowledgeApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Thai-IDC
 *
 * What's new<br> 1. Get Knowledge Subcategory (Training) <br> 2. Add API Get Knowledge by subcategory (Training) <br>
 *
 * OpenAPI spec version: v1.1.8
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * KnowledgeApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class KnowledgeApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation favoriteKnowledge
     *
     * favorite knowledges for web
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  string $action Action $push is favorite and $pull is unfavorite (required)
     * @param  string $knowledge_id knowledgeId is id (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SuccessResponse
     */
    public function favoriteKnowledge($platform, $x_access_token, $x_user, $action, $knowledge_id, $lang = 'th')
    {
        list($response) = $this->favoriteKnowledgeWithHttpInfo($platform, $x_access_token, $x_user, $action, $knowledge_id, $lang);
        return $response;
    }

    /**
     * Operation favoriteKnowledgeWithHttpInfo
     *
     * favorite knowledges for web
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  string $action Action $push is favorite and $pull is unfavorite (required)
     * @param  string $knowledge_id knowledgeId is id (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SuccessResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function favoriteKnowledgeWithHttpInfo($platform, $x_access_token, $x_user, $action, $knowledge_id, $lang = 'th')
    {
        $returnType = '\Swagger\Client\Model\SuccessResponse';
        $request = $this->favoriteKnowledgeRequest($platform, $x_access_token, $x_user, $action, $knowledge_id, $lang);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SuccessResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\NotAuthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SystemError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation favoriteKnowledgeAsync
     *
     * favorite knowledges for web
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  string $action Action $push is favorite and $pull is unfavorite (required)
     * @param  string $knowledge_id knowledgeId is id (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function favoriteKnowledgeAsync($platform, $x_access_token, $x_user, $action, $knowledge_id, $lang = 'th')
    {
        return $this->favoriteKnowledgeAsyncWithHttpInfo($platform, $x_access_token, $x_user, $action, $knowledge_id, $lang)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation favoriteKnowledgeAsyncWithHttpInfo
     *
     * favorite knowledges for web
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  string $action Action $push is favorite and $pull is unfavorite (required)
     * @param  string $knowledge_id knowledgeId is id (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function favoriteKnowledgeAsyncWithHttpInfo($platform, $x_access_token, $x_user, $action, $knowledge_id, $lang = 'th')
    {
        $returnType = '\Swagger\Client\Model\SuccessResponse';
        $request = $this->favoriteKnowledgeRequest($platform, $x_access_token, $x_user, $action, $knowledge_id, $lang);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'favoriteKnowledge'
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  string $action Action $push is favorite and $pull is unfavorite (required)
     * @param  string $knowledge_id knowledgeId is id (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function favoriteKnowledgeRequest($platform, $x_access_token, $x_user, $action, $knowledge_id, $lang = 'th')
    {
        // verify the required parameter 'platform' is set
        if ($platform === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $platform when calling favoriteKnowledge'
            );
        }
        // verify the required parameter 'x_access_token' is set
        if ($x_access_token === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_access_token when calling favoriteKnowledge'
            );
        }
        // verify the required parameter 'x_user' is set
        if ($x_user === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user when calling favoriteKnowledge'
            );
        }
        // verify the required parameter 'action' is set
        if ($action === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $action when calling favoriteKnowledge'
            );
        }
        // verify the required parameter 'knowledge_id' is set
        if ($knowledge_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $knowledge_id when calling favoriteKnowledge'
            );
        }

        $resourcePath = '/knowledges/favorite';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($platform !== null) {
            $headerParams['platform'] = ObjectSerializer::toHeaderValue($platform);
        }
        // header params
        if ($x_access_token !== null) {
            $headerParams['x-access-token'] = ObjectSerializer::toHeaderValue($x_access_token);
        }
        // header params
        if ($x_user !== null) {
            $headerParams['x-user'] = ObjectSerializer::toHeaderValue($x_user);
        }
        // header params
        if ($lang !== null) {
            $headerParams['lang'] = ObjectSerializer::toHeaderValue($lang);
        }


        // form params
        if ($action !== null) {
            $formParams['action'] = ObjectSerializer::toFormValue($action);
        }
        // form params
        if ($knowledge_id !== null) {
            $formParams['knowledgeId'] = ObjectSerializer::toFormValue($knowledge_id);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getKnowledge
     *
     * Get knowledge content list
     *
     * @param  string $platform platform (required)
     * @param  string $knowledge_category_id knowledge category id from knowledge category object (required)
     * @param  string $x_access_token access token after user login (optional)
     * @param  string $x_user username or email for check log (optional)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\KnowledgeResponse
     */
    public function getKnowledge($platform, $knowledge_category_id, $x_access_token = null, $x_user = null, $lang = 'th')
    {
        list($response) = $this->getKnowledgeWithHttpInfo($platform, $knowledge_category_id, $x_access_token, $x_user, $lang);
        return $response;
    }

    /**
     * Operation getKnowledgeWithHttpInfo
     *
     * Get knowledge content list
     *
     * @param  string $platform platform (required)
     * @param  string $knowledge_category_id knowledge category id from knowledge category object (required)
     * @param  string $x_access_token access token after user login (optional)
     * @param  string $x_user username or email for check log (optional)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\KnowledgeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getKnowledgeWithHttpInfo($platform, $knowledge_category_id, $x_access_token = null, $x_user = null, $lang = 'th')
    {
        $returnType = '\Swagger\Client\Model\KnowledgeResponse';
        $request = $this->getKnowledgeRequest($platform, $knowledge_category_id, $x_access_token, $x_user, $lang);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\KnowledgeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SystemError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getKnowledgeAsync
     *
     * Get knowledge content list
     *
     * @param  string $platform platform (required)
     * @param  string $knowledge_category_id knowledge category id from knowledge category object (required)
     * @param  string $x_access_token access token after user login (optional)
     * @param  string $x_user username or email for check log (optional)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getKnowledgeAsync($platform, $knowledge_category_id, $x_access_token = null, $x_user = null, $lang = 'th')
    {
        return $this->getKnowledgeAsyncWithHttpInfo($platform, $knowledge_category_id, $x_access_token, $x_user, $lang)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getKnowledgeAsyncWithHttpInfo
     *
     * Get knowledge content list
     *
     * @param  string $platform platform (required)
     * @param  string $knowledge_category_id knowledge category id from knowledge category object (required)
     * @param  string $x_access_token access token after user login (optional)
     * @param  string $x_user username or email for check log (optional)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getKnowledgeAsyncWithHttpInfo($platform, $knowledge_category_id, $x_access_token = null, $x_user = null, $lang = 'th')
    {
        $returnType = '\Swagger\Client\Model\KnowledgeResponse';
        $request = $this->getKnowledgeRequest($platform, $knowledge_category_id, $x_access_token, $x_user, $lang);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getKnowledge'
     *
     * @param  string $platform platform (required)
     * @param  string $knowledge_category_id knowledge category id from knowledge category object (required)
     * @param  string $x_access_token access token after user login (optional)
     * @param  string $x_user username or email for check log (optional)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getKnowledgeRequest($platform, $knowledge_category_id, $x_access_token = null, $x_user = null, $lang = 'th')
    {
        // verify the required parameter 'platform' is set
        if ($platform === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $platform when calling getKnowledge'
            );
        }
        // verify the required parameter 'knowledge_category_id' is set
        if ($knowledge_category_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $knowledge_category_id when calling getKnowledge'
            );
        }

        $resourcePath = '/knowledges/{knowledgeCategoryId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($platform !== null) {
            $headerParams['platform'] = ObjectSerializer::toHeaderValue($platform);
        }
        // header params
        if ($x_access_token !== null) {
            $headerParams['x-access-token'] = ObjectSerializer::toHeaderValue($x_access_token);
        }
        // header params
        if ($x_user !== null) {
            $headerParams['x-user'] = ObjectSerializer::toHeaderValue($x_user);
        }
        // header params
        if ($lang !== null) {
            $headerParams['lang'] = ObjectSerializer::toHeaderValue($lang);
        }

        // path params
        if ($knowledge_category_id !== null) {
            $resourcePath = str_replace(
                '{' . 'knowledgeCategoryId' . '}',
                ObjectSerializer::toPathValue($knowledge_category_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getKnowledgeById
     *
     * Get knowledge content by id
     *
     * @param  string $platform platform (required)
     * @param  string $knowledge_category_id knowledge category id from knowledge category object (required)
     * @param  string $knowledge_id knowledge id from knowledge object (required)
     * @param  string $x_access_token access token after user login (optional)
     * @param  string $x_user username or email for check log (optional)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\KnowledgeResponse
     */
    public function getKnowledgeById($platform, $knowledge_category_id, $knowledge_id, $x_access_token = null, $x_user = null, $lang = 'th')
    {
        list($response) = $this->getKnowledgeByIdWithHttpInfo($platform, $knowledge_category_id, $knowledge_id, $x_access_token, $x_user, $lang);
        return $response;
    }

    /**
     * Operation getKnowledgeByIdWithHttpInfo
     *
     * Get knowledge content by id
     *
     * @param  string $platform platform (required)
     * @param  string $knowledge_category_id knowledge category id from knowledge category object (required)
     * @param  string $knowledge_id knowledge id from knowledge object (required)
     * @param  string $x_access_token access token after user login (optional)
     * @param  string $x_user username or email for check log (optional)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\KnowledgeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getKnowledgeByIdWithHttpInfo($platform, $knowledge_category_id, $knowledge_id, $x_access_token = null, $x_user = null, $lang = 'th')
    {
        $returnType = '\Swagger\Client\Model\KnowledgeResponse';
        $request = $this->getKnowledgeByIdRequest($platform, $knowledge_category_id, $knowledge_id, $x_access_token, $x_user, $lang);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\KnowledgeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SystemError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getKnowledgeByIdAsync
     *
     * Get knowledge content by id
     *
     * @param  string $platform platform (required)
     * @param  string $knowledge_category_id knowledge category id from knowledge category object (required)
     * @param  string $knowledge_id knowledge id from knowledge object (required)
     * @param  string $x_access_token access token after user login (optional)
     * @param  string $x_user username or email for check log (optional)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getKnowledgeByIdAsync($platform, $knowledge_category_id, $knowledge_id, $x_access_token = null, $x_user = null, $lang = 'th')
    {
        return $this->getKnowledgeByIdAsyncWithHttpInfo($platform, $knowledge_category_id, $knowledge_id, $x_access_token, $x_user, $lang)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getKnowledgeByIdAsyncWithHttpInfo
     *
     * Get knowledge content by id
     *
     * @param  string $platform platform (required)
     * @param  string $knowledge_category_id knowledge category id from knowledge category object (required)
     * @param  string $knowledge_id knowledge id from knowledge object (required)
     * @param  string $x_access_token access token after user login (optional)
     * @param  string $x_user username or email for check log (optional)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getKnowledgeByIdAsyncWithHttpInfo($platform, $knowledge_category_id, $knowledge_id, $x_access_token = null, $x_user = null, $lang = 'th')
    {
        $returnType = '\Swagger\Client\Model\KnowledgeResponse';
        $request = $this->getKnowledgeByIdRequest($platform, $knowledge_category_id, $knowledge_id, $x_access_token, $x_user, $lang);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getKnowledgeById'
     *
     * @param  string $platform platform (required)
     * @param  string $knowledge_category_id knowledge category id from knowledge category object (required)
     * @param  string $knowledge_id knowledge id from knowledge object (required)
     * @param  string $x_access_token access token after user login (optional)
     * @param  string $x_user username or email for check log (optional)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getKnowledgeByIdRequest($platform, $knowledge_category_id, $knowledge_id, $x_access_token = null, $x_user = null, $lang = 'th')
    {
        // verify the required parameter 'platform' is set
        if ($platform === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $platform when calling getKnowledgeById'
            );
        }
        // verify the required parameter 'knowledge_category_id' is set
        if ($knowledge_category_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $knowledge_category_id when calling getKnowledgeById'
            );
        }
        // verify the required parameter 'knowledge_id' is set
        if ($knowledge_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $knowledge_id when calling getKnowledgeById'
            );
        }

        $resourcePath = '/knowledges/{knowledgeCategoryId}/{knowledgeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($platform !== null) {
            $headerParams['platform'] = ObjectSerializer::toHeaderValue($platform);
        }
        // header params
        if ($x_access_token !== null) {
            $headerParams['x-access-token'] = ObjectSerializer::toHeaderValue($x_access_token);
        }
        // header params
        if ($x_user !== null) {
            $headerParams['x-user'] = ObjectSerializer::toHeaderValue($x_user);
        }
        // header params
        if ($lang !== null) {
            $headerParams['lang'] = ObjectSerializer::toHeaderValue($lang);
        }

        // path params
        if ($knowledge_category_id !== null) {
            $resourcePath = str_replace(
                '{' . 'knowledgeCategoryId' . '}',
                ObjectSerializer::toPathValue($knowledge_category_id),
                $resourcePath
            );
        }
        // path params
        if ($knowledge_id !== null) {
            $resourcePath = str_replace(
                '{' . 'knowledgeId' . '}',
                ObjectSerializer::toPathValue($knowledge_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getKnowledgeBySubcategory
     *
     * Get knowledge by subcategory
     *
     * @param  string $platform platform (required)
     * @param  string $knowledge_category_id knowledge category id from knowledge category object (required)
     * @param  string $knowledge_subcategory_id knowledge subcategory id from knowledge subcategory object (required)
     * @param  string $x_access_token access token after user login (optional)
     * @param  string $x_user username or email for check log (optional)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\KnowledgeResponse
     */
    public function getKnowledgeBySubcategory($platform, $knowledge_category_id, $knowledge_subcategory_id, $x_access_token = null, $x_user = null, $lang = 'th')
    {
        list($response) = $this->getKnowledgeBySubcategoryWithHttpInfo($platform, $knowledge_category_id, $knowledge_subcategory_id, $x_access_token, $x_user, $lang);
        return $response;
    }

    /**
     * Operation getKnowledgeBySubcategoryWithHttpInfo
     *
     * Get knowledge by subcategory
     *
     * @param  string $platform platform (required)
     * @param  string $knowledge_category_id knowledge category id from knowledge category object (required)
     * @param  string $knowledge_subcategory_id knowledge subcategory id from knowledge subcategory object (required)
     * @param  string $x_access_token access token after user login (optional)
     * @param  string $x_user username or email for check log (optional)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\KnowledgeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getKnowledgeBySubcategoryWithHttpInfo($platform, $knowledge_category_id, $knowledge_subcategory_id, $x_access_token = null, $x_user = null, $lang = 'th')
    {
        $returnType = '\Swagger\Client\Model\KnowledgeResponse';
        $request = $this->getKnowledgeBySubcategoryRequest($platform, $knowledge_category_id, $knowledge_subcategory_id, $x_access_token, $x_user, $lang);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\KnowledgeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SystemError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getKnowledgeBySubcategoryAsync
     *
     * Get knowledge by subcategory
     *
     * @param  string $platform platform (required)
     * @param  string $knowledge_category_id knowledge category id from knowledge category object (required)
     * @param  string $knowledge_subcategory_id knowledge subcategory id from knowledge subcategory object (required)
     * @param  string $x_access_token access token after user login (optional)
     * @param  string $x_user username or email for check log (optional)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getKnowledgeBySubcategoryAsync($platform, $knowledge_category_id, $knowledge_subcategory_id, $x_access_token = null, $x_user = null, $lang = 'th')
    {
        return $this->getKnowledgeBySubcategoryAsyncWithHttpInfo($platform, $knowledge_category_id, $knowledge_subcategory_id, $x_access_token, $x_user, $lang)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getKnowledgeBySubcategoryAsyncWithHttpInfo
     *
     * Get knowledge by subcategory
     *
     * @param  string $platform platform (required)
     * @param  string $knowledge_category_id knowledge category id from knowledge category object (required)
     * @param  string $knowledge_subcategory_id knowledge subcategory id from knowledge subcategory object (required)
     * @param  string $x_access_token access token after user login (optional)
     * @param  string $x_user username or email for check log (optional)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getKnowledgeBySubcategoryAsyncWithHttpInfo($platform, $knowledge_category_id, $knowledge_subcategory_id, $x_access_token = null, $x_user = null, $lang = 'th')
    {
        $returnType = '\Swagger\Client\Model\KnowledgeResponse';
        $request = $this->getKnowledgeBySubcategoryRequest($platform, $knowledge_category_id, $knowledge_subcategory_id, $x_access_token, $x_user, $lang);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getKnowledgeBySubcategory'
     *
     * @param  string $platform platform (required)
     * @param  string $knowledge_category_id knowledge category id from knowledge category object (required)
     * @param  string $knowledge_subcategory_id knowledge subcategory id from knowledge subcategory object (required)
     * @param  string $x_access_token access token after user login (optional)
     * @param  string $x_user username or email for check log (optional)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getKnowledgeBySubcategoryRequest($platform, $knowledge_category_id, $knowledge_subcategory_id, $x_access_token = null, $x_user = null, $lang = 'th')
    {
        // verify the required parameter 'platform' is set
        if ($platform === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $platform when calling getKnowledgeBySubcategory'
            );
        }
        // verify the required parameter 'knowledge_category_id' is set
        if ($knowledge_category_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $knowledge_category_id when calling getKnowledgeBySubcategory'
            );
        }
        // verify the required parameter 'knowledge_subcategory_id' is set
        if ($knowledge_subcategory_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $knowledge_subcategory_id when calling getKnowledgeBySubcategory'
            );
        }

        $resourcePath = '/knowledges/category/{knowledgeCategoryId}/sub_category/{knowledgeSubcategoryId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($platform !== null) {
            $headerParams['platform'] = ObjectSerializer::toHeaderValue($platform);
        }
        // header params
        if ($x_access_token !== null) {
            $headerParams['x-access-token'] = ObjectSerializer::toHeaderValue($x_access_token);
        }
        // header params
        if ($x_user !== null) {
            $headerParams['x-user'] = ObjectSerializer::toHeaderValue($x_user);
        }
        // header params
        if ($lang !== null) {
            $headerParams['lang'] = ObjectSerializer::toHeaderValue($lang);
        }

        // path params
        if ($knowledge_category_id !== null) {
            $resourcePath = str_replace(
                '{' . 'knowledgeCategoryId' . '}',
                ObjectSerializer::toPathValue($knowledge_category_id),
                $resourcePath
            );
        }
        // path params
        if ($knowledge_subcategory_id !== null) {
            $resourcePath = str_replace(
                '{' . 'knowledgeSubcategoryId' . '}',
                ObjectSerializer::toPathValue($knowledge_subcategory_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getKnowledgeCategory
     *
     * Get knowledge category
     *
     * @param  string $platform platform (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\CategoryResponse
     */
    public function getKnowledgeCategory($platform, $lang = 'th')
    {
        list($response) = $this->getKnowledgeCategoryWithHttpInfo($platform, $lang);
        return $response;
    }

    /**
     * Operation getKnowledgeCategoryWithHttpInfo
     *
     * Get knowledge category
     *
     * @param  string $platform platform (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\CategoryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getKnowledgeCategoryWithHttpInfo($platform, $lang = 'th')
    {
        $returnType = '\Swagger\Client\Model\CategoryResponse';
        $request = $this->getKnowledgeCategoryRequest($platform, $lang);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CategoryResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SystemError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getKnowledgeCategoryAsync
     *
     * Get knowledge category
     *
     * @param  string $platform platform (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getKnowledgeCategoryAsync($platform, $lang = 'th')
    {
        return $this->getKnowledgeCategoryAsyncWithHttpInfo($platform, $lang)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getKnowledgeCategoryAsyncWithHttpInfo
     *
     * Get knowledge category
     *
     * @param  string $platform platform (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getKnowledgeCategoryAsyncWithHttpInfo($platform, $lang = 'th')
    {
        $returnType = '\Swagger\Client\Model\CategoryResponse';
        $request = $this->getKnowledgeCategoryRequest($platform, $lang);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getKnowledgeCategory'
     *
     * @param  string $platform platform (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getKnowledgeCategoryRequest($platform, $lang = 'th')
    {
        // verify the required parameter 'platform' is set
        if ($platform === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $platform when calling getKnowledgeCategory'
            );
        }

        $resourcePath = '/knowledges/categories';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($platform !== null) {
            $headerParams['platform'] = ObjectSerializer::toHeaderValue($platform);
        }
        // header params
        if ($lang !== null) {
            $headerParams['lang'] = ObjectSerializer::toHeaderValue($lang);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getKnowledgeSubcategory
     *
     * Get knowledge subcategory
     *
     * @param  string $platform platform (required)
     * @param  string $knowledge_category_id knowledge category id from knowledge category object (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\CategoryResponse
     */
    public function getKnowledgeSubcategory($platform, $knowledge_category_id, $lang = 'th')
    {
        list($response) = $this->getKnowledgeSubcategoryWithHttpInfo($platform, $knowledge_category_id, $lang);
        return $response;
    }

    /**
     * Operation getKnowledgeSubcategoryWithHttpInfo
     *
     * Get knowledge subcategory
     *
     * @param  string $platform platform (required)
     * @param  string $knowledge_category_id knowledge category id from knowledge category object (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\CategoryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getKnowledgeSubcategoryWithHttpInfo($platform, $knowledge_category_id, $lang = 'th')
    {
        $returnType = '\Swagger\Client\Model\CategoryResponse';
        $request = $this->getKnowledgeSubcategoryRequest($platform, $knowledge_category_id, $lang);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CategoryResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SystemError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getKnowledgeSubcategoryAsync
     *
     * Get knowledge subcategory
     *
     * @param  string $platform platform (required)
     * @param  string $knowledge_category_id knowledge category id from knowledge category object (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getKnowledgeSubcategoryAsync($platform, $knowledge_category_id, $lang = 'th')
    {
        return $this->getKnowledgeSubcategoryAsyncWithHttpInfo($platform, $knowledge_category_id, $lang)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getKnowledgeSubcategoryAsyncWithHttpInfo
     *
     * Get knowledge subcategory
     *
     * @param  string $platform platform (required)
     * @param  string $knowledge_category_id knowledge category id from knowledge category object (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getKnowledgeSubcategoryAsyncWithHttpInfo($platform, $knowledge_category_id, $lang = 'th')
    {
        $returnType = '\Swagger\Client\Model\CategoryResponse';
        $request = $this->getKnowledgeSubcategoryRequest($platform, $knowledge_category_id, $lang);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getKnowledgeSubcategory'
     *
     * @param  string $platform platform (required)
     * @param  string $knowledge_category_id knowledge category id from knowledge category object (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getKnowledgeSubcategoryRequest($platform, $knowledge_category_id, $lang = 'th')
    {
        // verify the required parameter 'platform' is set
        if ($platform === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $platform when calling getKnowledgeSubcategory'
            );
        }
        // verify the required parameter 'knowledge_category_id' is set
        if ($knowledge_category_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $knowledge_category_id when calling getKnowledgeSubcategory'
            );
        }

        $resourcePath = '/knowledges/sub_categories/{knowledgeCategoryId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($platform !== null) {
            $headerParams['platform'] = ObjectSerializer::toHeaderValue($platform);
        }
        // header params
        if ($lang !== null) {
            $headerParams['lang'] = ObjectSerializer::toHeaderValue($lang);
        }

        // path params
        if ($knowledge_category_id !== null) {
            $resourcePath = str_replace(
                '{' . 'knowledgeCategoryId' . '}',
                ObjectSerializer::toPathValue($knowledge_category_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation likeKnowledge
     *
     * Like video
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  string $action Action $push is like and $pull is unlike (required)
     * @param  string $knowledge_id knowledgeId is video id (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SuccessResponse
     */
    public function likeKnowledge($platform, $x_access_token, $x_user, $action, $knowledge_id, $lang = 'th')
    {
        list($response) = $this->likeKnowledgeWithHttpInfo($platform, $x_access_token, $x_user, $action, $knowledge_id, $lang);
        return $response;
    }

    /**
     * Operation likeKnowledgeWithHttpInfo
     *
     * Like video
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  string $action Action $push is like and $pull is unlike (required)
     * @param  string $knowledge_id knowledgeId is video id (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SuccessResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function likeKnowledgeWithHttpInfo($platform, $x_access_token, $x_user, $action, $knowledge_id, $lang = 'th')
    {
        $returnType = '\Swagger\Client\Model\SuccessResponse';
        $request = $this->likeKnowledgeRequest($platform, $x_access_token, $x_user, $action, $knowledge_id, $lang);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SuccessResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\NotAuthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SystemError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation likeKnowledgeAsync
     *
     * Like video
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  string $action Action $push is like and $pull is unlike (required)
     * @param  string $knowledge_id knowledgeId is video id (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function likeKnowledgeAsync($platform, $x_access_token, $x_user, $action, $knowledge_id, $lang = 'th')
    {
        return $this->likeKnowledgeAsyncWithHttpInfo($platform, $x_access_token, $x_user, $action, $knowledge_id, $lang)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation likeKnowledgeAsyncWithHttpInfo
     *
     * Like video
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  string $action Action $push is like and $pull is unlike (required)
     * @param  string $knowledge_id knowledgeId is video id (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function likeKnowledgeAsyncWithHttpInfo($platform, $x_access_token, $x_user, $action, $knowledge_id, $lang = 'th')
    {
        $returnType = '\Swagger\Client\Model\SuccessResponse';
        $request = $this->likeKnowledgeRequest($platform, $x_access_token, $x_user, $action, $knowledge_id, $lang);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'likeKnowledge'
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  string $action Action $push is like and $pull is unlike (required)
     * @param  string $knowledge_id knowledgeId is video id (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function likeKnowledgeRequest($platform, $x_access_token, $x_user, $action, $knowledge_id, $lang = 'th')
    {
        // verify the required parameter 'platform' is set
        if ($platform === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $platform when calling likeKnowledge'
            );
        }
        // verify the required parameter 'x_access_token' is set
        if ($x_access_token === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_access_token when calling likeKnowledge'
            );
        }
        // verify the required parameter 'x_user' is set
        if ($x_user === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user when calling likeKnowledge'
            );
        }
        // verify the required parameter 'action' is set
        if ($action === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $action when calling likeKnowledge'
            );
        }
        // verify the required parameter 'knowledge_id' is set
        if ($knowledge_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $knowledge_id when calling likeKnowledge'
            );
        }

        $resourcePath = '/knowledges/like';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($platform !== null) {
            $headerParams['platform'] = ObjectSerializer::toHeaderValue($platform);
        }
        // header params
        if ($x_access_token !== null) {
            $headerParams['x-access-token'] = ObjectSerializer::toHeaderValue($x_access_token);
        }
        // header params
        if ($x_user !== null) {
            $headerParams['x-user'] = ObjectSerializer::toHeaderValue($x_user);
        }
        // header params
        if ($lang !== null) {
            $headerParams['lang'] = ObjectSerializer::toHeaderValue($lang);
        }


        // form params
        if ($action !== null) {
            $formParams['action'] = ObjectSerializer::toFormValue($action);
        }
        // form params
        if ($knowledge_id !== null) {
            $formParams['knowledgeId'] = ObjectSerializer::toFormValue($knowledge_id);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchKnowledge
     *
     * Search knowledge
     *
     * @param  string $platform platform (required)
     * @param  string $text_search text_search (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\KnowledgeSearchResponse
     */
    public function searchKnowledge($platform, $text_search, $lang = 'th')
    {
        list($response) = $this->searchKnowledgeWithHttpInfo($platform, $text_search, $lang);
        return $response;
    }

    /**
     * Operation searchKnowledgeWithHttpInfo
     *
     * Search knowledge
     *
     * @param  string $platform platform (required)
     * @param  string $text_search (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\KnowledgeSearchResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchKnowledgeWithHttpInfo($platform, $text_search, $lang = 'th')
    {
        $returnType = '\Swagger\Client\Model\KnowledgeSearchResponse';
        $request = $this->searchKnowledgeRequest($platform, $text_search, $lang);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\KnowledgeSearchResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SystemError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchKnowledgeAsync
     *
     * Search knowledge
     *
     * @param  string $platform platform (required)
     * @param  string $text_search (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchKnowledgeAsync($platform, $text_search, $lang = 'th')
    {
        return $this->searchKnowledgeAsyncWithHttpInfo($platform, $text_search, $lang)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchKnowledgeAsyncWithHttpInfo
     *
     * Search knowledge
     *
     * @param  string $platform platform (required)
     * @param  string $text_search (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchKnowledgeAsyncWithHttpInfo($platform, $text_search, $lang = 'th')
    {
        $returnType = '\Swagger\Client\Model\KnowledgeSearchResponse';
        $request = $this->searchKnowledgeRequest($platform, $text_search, $lang);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchKnowledge'
     *
     * @param  string $platform platform (required)
     * @param  string $text_search (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchKnowledgeRequest($platform, $text_search, $lang = 'th')
    {
        // verify the required parameter 'platform' is set
        if ($platform === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $platform when calling searchKnowledge'
            );
        }
        // verify the required parameter 'text_search' is set
        if ($text_search === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $text_search when calling searchKnowledge'
            );
        }

        $resourcePath = '/knowledges/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($platform !== null) {
            $headerParams['platform'] = ObjectSerializer::toHeaderValue($platform);
        }
        // header params
        if ($lang !== null) {
            $headerParams['lang'] = ObjectSerializer::toHeaderValue($lang);
        }


        // form params
        if ($text_search !== null) {
            $formParams['textSearch'] = ObjectSerializer::toFormValue($text_search);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
