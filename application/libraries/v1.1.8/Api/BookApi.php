<?php
/**
 * BookApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Thai-IDC
 *
 * What's new<br> 1. Get Knowledge Subcategory (Training) <br> 2. Add API Get Knowledge by subcategory (Training) <br>
 *
 * OpenAPI spec version: v1.1.8
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * BookApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BookApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteBookShelf
     *
     * Delete book shelf
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  \Swagger\Client\Model\BookDeleteRequest $body Pet object that needs to be added to the store (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SuccessResponse
     */
    public function deleteBookShelf($platform, $x_access_token, $x_user, $body, $lang = 'th')
    {
        list($response) = $this->deleteBookShelfWithHttpInfo($platform, $x_access_token, $x_user, $body, $lang);
        return $response;
    }

    /**
     * Operation deleteBookShelfWithHttpInfo
     *
     * Delete book shelf
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  \Swagger\Client\Model\BookDeleteRequest $body Pet object that needs to be added to the store (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SuccessResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteBookShelfWithHttpInfo($platform, $x_access_token, $x_user, $body, $lang = 'th')
    {
        $returnType = '\Swagger\Client\Model\SuccessResponse';
        $request = $this->deleteBookShelfRequest($platform, $x_access_token, $x_user, $body, $lang);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SuccessResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\NotAuthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SystemError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteBookShelfAsync
     *
     * Delete book shelf
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  \Swagger\Client\Model\BookDeleteRequest $body Pet object that needs to be added to the store (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteBookShelfAsync($platform, $x_access_token, $x_user, $body, $lang = 'th')
    {
        return $this->deleteBookShelfAsyncWithHttpInfo($platform, $x_access_token, $x_user, $body, $lang)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteBookShelfAsyncWithHttpInfo
     *
     * Delete book shelf
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  \Swagger\Client\Model\BookDeleteRequest $body Pet object that needs to be added to the store (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteBookShelfAsyncWithHttpInfo($platform, $x_access_token, $x_user, $body, $lang = 'th')
    {
        $returnType = '\Swagger\Client\Model\SuccessResponse';
        $request = $this->deleteBookShelfRequest($platform, $x_access_token, $x_user, $body, $lang);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteBookShelf'
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  \Swagger\Client\Model\BookDeleteRequest $body Pet object that needs to be added to the store (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteBookShelfRequest($platform, $x_access_token, $x_user, $body, $lang = 'th')
    {
        // verify the required parameter 'platform' is set
        if ($platform === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $platform when calling deleteBookShelf'
            );
        }
        // verify the required parameter 'x_access_token' is set
        if ($x_access_token === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_access_token when calling deleteBookShelf'
            );
        }
        // verify the required parameter 'x_user' is set
        if ($x_user === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user when calling deleteBookShelf'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling deleteBookShelf'
            );
        }

        $resourcePath = '/books/shelf/delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($platform !== null) {
            $headerParams['platform'] = ObjectSerializer::toHeaderValue($platform);
        }
        // header params
        if ($x_access_token !== null) {
            $headerParams['x-access-token'] = ObjectSerializer::toHeaderValue($x_access_token);
        }
        // header params
        if ($x_user !== null) {
            $headerParams['x-user'] = ObjectSerializer::toHeaderValue($x_user);
        }
        // header params
        if ($lang !== null) {
            $headerParams['lang'] = ObjectSerializer::toHeaderValue($lang);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation downloadBookShelf
     *
     * Download book shelf
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  string $book_id bookId is _id from book object (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SuccessResponse
     */
    public function downloadBookShelf($platform, $x_access_token, $x_user, $book_id, $lang = 'th')
    {
        list($response) = $this->downloadBookShelfWithHttpInfo($platform, $x_access_token, $x_user, $book_id, $lang);
        return $response;
    }

    /**
     * Operation downloadBookShelfWithHttpInfo
     *
     * Download book shelf
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  string $book_id bookId is _id from book object (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SuccessResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function downloadBookShelfWithHttpInfo($platform, $x_access_token, $x_user, $book_id, $lang = 'th')
    {
        $returnType = '\Swagger\Client\Model\SuccessResponse';
        $request = $this->downloadBookShelfRequest($platform, $x_access_token, $x_user, $book_id, $lang);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SuccessResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\NotAuthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SystemError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation downloadBookShelfAsync
     *
     * Download book shelf
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  string $book_id bookId is _id from book object (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadBookShelfAsync($platform, $x_access_token, $x_user, $book_id, $lang = 'th')
    {
        return $this->downloadBookShelfAsyncWithHttpInfo($platform, $x_access_token, $x_user, $book_id, $lang)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation downloadBookShelfAsyncWithHttpInfo
     *
     * Download book shelf
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  string $book_id bookId is _id from book object (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadBookShelfAsyncWithHttpInfo($platform, $x_access_token, $x_user, $book_id, $lang = 'th')
    {
        $returnType = '\Swagger\Client\Model\SuccessResponse';
        $request = $this->downloadBookShelfRequest($platform, $x_access_token, $x_user, $book_id, $lang);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'downloadBookShelf'
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  string $book_id bookId is _id from book object (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function downloadBookShelfRequest($platform, $x_access_token, $x_user, $book_id, $lang = 'th')
    {
        // verify the required parameter 'platform' is set
        if ($platform === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $platform when calling downloadBookShelf'
            );
        }
        // verify the required parameter 'x_access_token' is set
        if ($x_access_token === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_access_token when calling downloadBookShelf'
            );
        }
        // verify the required parameter 'x_user' is set
        if ($x_user === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user when calling downloadBookShelf'
            );
        }
        // verify the required parameter 'book_id' is set
        if ($book_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $book_id when calling downloadBookShelf'
            );
        }

        $resourcePath = '/books/shelf';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($platform !== null) {
            $headerParams['platform'] = ObjectSerializer::toHeaderValue($platform);
        }
        // header params
        if ($x_access_token !== null) {
            $headerParams['x-access-token'] = ObjectSerializer::toHeaderValue($x_access_token);
        }
        // header params
        if ($x_user !== null) {
            $headerParams['x-user'] = ObjectSerializer::toHeaderValue($x_user);
        }
        // header params
        if ($lang !== null) {
            $headerParams['lang'] = ObjectSerializer::toHeaderValue($lang);
        }


        // form params
        if ($book_id !== null) {
            $formParams['bookId'] = ObjectSerializer::toFormValue($book_id);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBook
     *
     * Get book
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (optional)
     * @param  string $x_user username or email for check log (optional)
     * @param  string $lang lang is th or en (optional, default to th)
     * @param  string $category_id Category values that need to be considered for filter (optional)
     * @param  string $sort_field field for sort book list (optional)
     * @param  int $sort_value sortValue is 1 ASC and -1 DESC (optional)
     * @param  string $pagination Pagination for load more book list. Send bookId (_id) last array (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\BookResponse
     */
    public function getBook($platform, $x_access_token = null, $x_user = null, $lang = 'th', $category_id = null, $sort_field = null, $sort_value = null, $pagination = null)
    {
        list($response) = $this->getBookWithHttpInfo($platform, $x_access_token, $x_user, $lang, $category_id, $sort_field, $sort_value, $pagination);
        return $response;
    }

    /**
     * Operation getBookWithHttpInfo
     *
     * Get book
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (optional)
     * @param  string $x_user username or email for check log (optional)
     * @param  string $lang lang is th or en (optional, default to th)
     * @param  string $category_id Category values that need to be considered for filter (optional)
     * @param  string $sort_field field for sort book list (optional)
     * @param  int $sort_value sortValue is 1 ASC and -1 DESC (optional)
     * @param  string $pagination Pagination for load more book list. Send bookId (_id) last array (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\BookResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBookWithHttpInfo($platform, $x_access_token = null, $x_user = null, $lang = 'th', $category_id = null, $sort_field = null, $sort_value = null, $pagination = null)
    {
        $returnType = '\Swagger\Client\Model\BookResponse';
        $request = $this->getBookRequest($platform, $x_access_token, $x_user, $lang, $category_id, $sort_field, $sort_value, $pagination);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\BookResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SystemError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBookAsync
     *
     * Get book
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (optional)
     * @param  string $x_user username or email for check log (optional)
     * @param  string $lang lang is th or en (optional, default to th)
     * @param  string $category_id Category values that need to be considered for filter (optional)
     * @param  string $sort_field field for sort book list (optional)
     * @param  int $sort_value sortValue is 1 ASC and -1 DESC (optional)
     * @param  string $pagination Pagination for load more book list. Send bookId (_id) last array (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBookAsync($platform, $x_access_token = null, $x_user = null, $lang = 'th', $category_id = null, $sort_field = null, $sort_value = null, $pagination = null)
    {
        return $this->getBookAsyncWithHttpInfo($platform, $x_access_token, $x_user, $lang, $category_id, $sort_field, $sort_value, $pagination)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBookAsyncWithHttpInfo
     *
     * Get book
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (optional)
     * @param  string $x_user username or email for check log (optional)
     * @param  string $lang lang is th or en (optional, default to th)
     * @param  string $category_id Category values that need to be considered for filter (optional)
     * @param  string $sort_field field for sort book list (optional)
     * @param  int $sort_value sortValue is 1 ASC and -1 DESC (optional)
     * @param  string $pagination Pagination for load more book list. Send bookId (_id) last array (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBookAsyncWithHttpInfo($platform, $x_access_token = null, $x_user = null, $lang = 'th', $category_id = null, $sort_field = null, $sort_value = null, $pagination = null)
    {
        $returnType = '\Swagger\Client\Model\BookResponse';
        $request = $this->getBookRequest($platform, $x_access_token, $x_user, $lang, $category_id, $sort_field, $sort_value, $pagination);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBook'
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (optional)
     * @param  string $x_user username or email for check log (optional)
     * @param  string $lang lang is th or en (optional, default to th)
     * @param  string $category_id Category values that need to be considered for filter (optional)
     * @param  string $sort_field field for sort book list (optional)
     * @param  int $sort_value sortValue is 1 ASC and -1 DESC (optional)
     * @param  string $pagination Pagination for load more book list. Send bookId (_id) last array (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getBookRequest($platform, $x_access_token = null, $x_user = null, $lang = 'th', $category_id = null, $sort_field = null, $sort_value = null, $pagination = null)
    {
        // verify the required parameter 'platform' is set
        if ($platform === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $platform when calling getBook'
            );
        }

        $resourcePath = '/books/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($category_id !== null) {
            $queryParams['categoryId'] = ObjectSerializer::toQueryValue($category_id);
        }
        // query params
        if ($sort_field !== null) {
            $queryParams['sortField'] = ObjectSerializer::toQueryValue($sort_field);
        }
        // query params
        if ($sort_value !== null) {
            $queryParams['sortValue'] = ObjectSerializer::toQueryValue($sort_value);
        }
        // query params
        if ($pagination !== null) {
            $queryParams['pagination'] = ObjectSerializer::toQueryValue($pagination);
        }
        // header params
        if ($platform !== null) {
            $headerParams['platform'] = ObjectSerializer::toHeaderValue($platform);
        }
        // header params
        if ($x_access_token !== null) {
            $headerParams['x-access-token'] = ObjectSerializer::toHeaderValue($x_access_token);
        }
        // header params
        if ($x_user !== null) {
            $headerParams['x-user'] = ObjectSerializer::toHeaderValue($x_user);
        }
        // header params
        if ($lang !== null) {
            $headerParams['lang'] = ObjectSerializer::toHeaderValue($lang);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBookById
     *
     * Get book by id
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  string $book_id Book id is _id in book object for get book detail (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\BookResponse
     */
    public function getBookById($platform, $x_access_token, $x_user, $book_id, $lang = 'th')
    {
        list($response) = $this->getBookByIdWithHttpInfo($platform, $x_access_token, $x_user, $book_id, $lang);
        return $response;
    }

    /**
     * Operation getBookByIdWithHttpInfo
     *
     * Get book by id
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  string $book_id Book id is _id in book object for get book detail (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\BookResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBookByIdWithHttpInfo($platform, $x_access_token, $x_user, $book_id, $lang = 'th')
    {
        $returnType = '\Swagger\Client\Model\BookResponse';
        $request = $this->getBookByIdRequest($platform, $x_access_token, $x_user, $book_id, $lang);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\BookResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SystemError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBookByIdAsync
     *
     * Get book by id
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  string $book_id Book id is _id in book object for get book detail (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBookByIdAsync($platform, $x_access_token, $x_user, $book_id, $lang = 'th')
    {
        return $this->getBookByIdAsyncWithHttpInfo($platform, $x_access_token, $x_user, $book_id, $lang)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBookByIdAsyncWithHttpInfo
     *
     * Get book by id
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  string $book_id Book id is _id in book object for get book detail (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBookByIdAsyncWithHttpInfo($platform, $x_access_token, $x_user, $book_id, $lang = 'th')
    {
        $returnType = '\Swagger\Client\Model\BookResponse';
        $request = $this->getBookByIdRequest($platform, $x_access_token, $x_user, $book_id, $lang);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBookById'
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  string $book_id Book id is _id in book object for get book detail (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getBookByIdRequest($platform, $x_access_token, $x_user, $book_id, $lang = 'th')
    {
        // verify the required parameter 'platform' is set
        if ($platform === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $platform when calling getBookById'
            );
        }
        // verify the required parameter 'x_access_token' is set
        if ($x_access_token === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_access_token when calling getBookById'
            );
        }
        // verify the required parameter 'x_user' is set
        if ($x_user === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user when calling getBookById'
            );
        }
        // verify the required parameter 'book_id' is set
        if ($book_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $book_id when calling getBookById'
            );
        }

        $resourcePath = '/books/{bookId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($platform !== null) {
            $headerParams['platform'] = ObjectSerializer::toHeaderValue($platform);
        }
        // header params
        if ($x_access_token !== null) {
            $headerParams['x-access-token'] = ObjectSerializer::toHeaderValue($x_access_token);
        }
        // header params
        if ($x_user !== null) {
            $headerParams['x-user'] = ObjectSerializer::toHeaderValue($x_user);
        }
        // header params
        if ($lang !== null) {
            $headerParams['lang'] = ObjectSerializer::toHeaderValue($lang);
        }

        // path params
        if ($book_id !== null) {
            $resourcePath = str_replace(
                '{' . 'bookId' . '}',
                ObjectSerializer::toPathValue($book_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBookCategory
     *
     * Get book category
     *
     * @param  string $platform platform (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\CategoryResponse
     */
    public function getBookCategory($platform, $lang = 'th')
    {
        list($response) = $this->getBookCategoryWithHttpInfo($platform, $lang);
        return $response;
    }

    /**
     * Operation getBookCategoryWithHttpInfo
     *
     * Get book category
     *
     * @param  string $platform platform (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\CategoryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBookCategoryWithHttpInfo($platform, $lang = 'th')
    {
        $returnType = '\Swagger\Client\Model\CategoryResponse';
        $request = $this->getBookCategoryRequest($platform, $lang);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CategoryResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SystemError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBookCategoryAsync
     *
     * Get book category
     *
     * @param  string $platform platform (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBookCategoryAsync($platform, $lang = 'th')
    {
        return $this->getBookCategoryAsyncWithHttpInfo($platform, $lang)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBookCategoryAsyncWithHttpInfo
     *
     * Get book category
     *
     * @param  string $platform platform (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBookCategoryAsyncWithHttpInfo($platform, $lang = 'th')
    {
        $returnType = '\Swagger\Client\Model\CategoryResponse';
        $request = $this->getBookCategoryRequest($platform, $lang);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBookCategory'
     *
     * @param  string $platform platform (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getBookCategoryRequest($platform, $lang = 'th')
    {
        // verify the required parameter 'platform' is set
        if ($platform === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $platform when calling getBookCategory'
            );
        }

        $resourcePath = '/books/categories';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($platform !== null) {
            $headerParams['platform'] = ObjectSerializer::toHeaderValue($platform);
        }
        // header params
        if ($lang !== null) {
            $headerParams['lang'] = ObjectSerializer::toHeaderValue($lang);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBookShelf
     *
     * Get book shelf
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\BookResponse
     */
    public function getBookShelf($platform, $x_access_token, $x_user, $lang = 'th')
    {
        list($response) = $this->getBookShelfWithHttpInfo($platform, $x_access_token, $x_user, $lang);
        return $response;
    }

    /**
     * Operation getBookShelfWithHttpInfo
     *
     * Get book shelf
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\BookResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBookShelfWithHttpInfo($platform, $x_access_token, $x_user, $lang = 'th')
    {
        $returnType = '\Swagger\Client\Model\BookResponse';
        $request = $this->getBookShelfRequest($platform, $x_access_token, $x_user, $lang);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\BookResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\NotAuthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SystemError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBookShelfAsync
     *
     * Get book shelf
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBookShelfAsync($platform, $x_access_token, $x_user, $lang = 'th')
    {
        return $this->getBookShelfAsyncWithHttpInfo($platform, $x_access_token, $x_user, $lang)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBookShelfAsyncWithHttpInfo
     *
     * Get book shelf
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBookShelfAsyncWithHttpInfo($platform, $x_access_token, $x_user, $lang = 'th')
    {
        $returnType = '\Swagger\Client\Model\BookResponse';
        $request = $this->getBookShelfRequest($platform, $x_access_token, $x_user, $lang);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBookShelf'
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getBookShelfRequest($platform, $x_access_token, $x_user, $lang = 'th')
    {
        // verify the required parameter 'platform' is set
        if ($platform === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $platform when calling getBookShelf'
            );
        }
        // verify the required parameter 'x_access_token' is set
        if ($x_access_token === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_access_token when calling getBookShelf'
            );
        }
        // verify the required parameter 'x_user' is set
        if ($x_user === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user when calling getBookShelf'
            );
        }

        $resourcePath = '/books/shelf';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($platform !== null) {
            $headerParams['platform'] = ObjectSerializer::toHeaderValue($platform);
        }
        // header params
        if ($x_access_token !== null) {
            $headerParams['x-access-token'] = ObjectSerializer::toHeaderValue($x_access_token);
        }
        // header params
        if ($x_user !== null) {
            $headerParams['x-user'] = ObjectSerializer::toHeaderValue($x_user);
        }
        // header params
        if ($lang !== null) {
            $headerParams['lang'] = ObjectSerializer::toHeaderValue($lang);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation likeReviewBook
     *
     * Like or Unlike review
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  string $review_id reviewId is _id from review object (required)
     * @param  string $action $push is like review. $pull is unlike review (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SuccessResponse
     */
    public function likeReviewBook($platform, $x_access_token, $x_user, $review_id, $action, $lang = 'th')
    {
        list($response) = $this->likeReviewBookWithHttpInfo($platform, $x_access_token, $x_user, $review_id, $action, $lang);
        return $response;
    }

    /**
     * Operation likeReviewBookWithHttpInfo
     *
     * Like or Unlike review
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  string $review_id reviewId is _id from review object (required)
     * @param  string $action $push is like review. $pull is unlike review (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SuccessResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function likeReviewBookWithHttpInfo($platform, $x_access_token, $x_user, $review_id, $action, $lang = 'th')
    {
        $returnType = '\Swagger\Client\Model\SuccessResponse';
        $request = $this->likeReviewBookRequest($platform, $x_access_token, $x_user, $review_id, $action, $lang);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SuccessResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\NotAuthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SystemError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation likeReviewBookAsync
     *
     * Like or Unlike review
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  string $review_id reviewId is _id from review object (required)
     * @param  string $action $push is like review. $pull is unlike review (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function likeReviewBookAsync($platform, $x_access_token, $x_user, $review_id, $action, $lang = 'th')
    {
        return $this->likeReviewBookAsyncWithHttpInfo($platform, $x_access_token, $x_user, $review_id, $action, $lang)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation likeReviewBookAsyncWithHttpInfo
     *
     * Like or Unlike review
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  string $review_id reviewId is _id from review object (required)
     * @param  string $action $push is like review. $pull is unlike review (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function likeReviewBookAsyncWithHttpInfo($platform, $x_access_token, $x_user, $review_id, $action, $lang = 'th')
    {
        $returnType = '\Swagger\Client\Model\SuccessResponse';
        $request = $this->likeReviewBookRequest($platform, $x_access_token, $x_user, $review_id, $action, $lang);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'likeReviewBook'
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  string $review_id reviewId is _id from review object (required)
     * @param  string $action $push is like review. $pull is unlike review (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function likeReviewBookRequest($platform, $x_access_token, $x_user, $review_id, $action, $lang = 'th')
    {
        // verify the required parameter 'platform' is set
        if ($platform === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $platform when calling likeReviewBook'
            );
        }
        // verify the required parameter 'x_access_token' is set
        if ($x_access_token === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_access_token when calling likeReviewBook'
            );
        }
        // verify the required parameter 'x_user' is set
        if ($x_user === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user when calling likeReviewBook'
            );
        }
        // verify the required parameter 'review_id' is set
        if ($review_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $review_id when calling likeReviewBook'
            );
        }
        // verify the required parameter 'action' is set
        if ($action === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $action when calling likeReviewBook'
            );
        }

        $resourcePath = '/reviews/like';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($platform !== null) {
            $headerParams['platform'] = ObjectSerializer::toHeaderValue($platform);
        }
        // header params
        if ($x_access_token !== null) {
            $headerParams['x-access-token'] = ObjectSerializer::toHeaderValue($x_access_token);
        }
        // header params
        if ($x_user !== null) {
            $headerParams['x-user'] = ObjectSerializer::toHeaderValue($x_user);
        }
        // header params
        if ($lang !== null) {
            $headerParams['lang'] = ObjectSerializer::toHeaderValue($lang);
        }


        // form params
        if ($review_id !== null) {
            $formParams['reviewId'] = ObjectSerializer::toFormValue($review_id);
        }
        // form params
        if ($action !== null) {
            $formParams['action'] = ObjectSerializer::toFormValue($action);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reviewBookShelf
     *
     * Write review book
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  string $book_id bookId is _id from book object (required)
     * @param  int $rating rating 1 2 3 4 5 (required)
     * @param  string $note note (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SuccessResponse
     */
    public function reviewBookShelf($platform, $x_access_token, $x_user, $book_id, $rating, $note, $lang = 'th')
    {
        list($response) = $this->reviewBookShelfWithHttpInfo($platform, $x_access_token, $x_user, $book_id, $rating, $note, $lang);
        return $response;
    }

    /**
     * Operation reviewBookShelfWithHttpInfo
     *
     * Write review book
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  string $book_id bookId is _id from book object (required)
     * @param  int $rating rating 1 2 3 4 5 (required)
     * @param  string $note (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SuccessResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function reviewBookShelfWithHttpInfo($platform, $x_access_token, $x_user, $book_id, $rating, $note, $lang = 'th')
    {
        $returnType = '\Swagger\Client\Model\SuccessResponse';
        $request = $this->reviewBookShelfRequest($platform, $x_access_token, $x_user, $book_id, $rating, $note, $lang);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SuccessResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\NotAuthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SystemError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reviewBookShelfAsync
     *
     * Write review book
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  string $book_id bookId is _id from book object (required)
     * @param  int $rating rating 1 2 3 4 5 (required)
     * @param  string $note (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reviewBookShelfAsync($platform, $x_access_token, $x_user, $book_id, $rating, $note, $lang = 'th')
    {
        return $this->reviewBookShelfAsyncWithHttpInfo($platform, $x_access_token, $x_user, $book_id, $rating, $note, $lang)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reviewBookShelfAsyncWithHttpInfo
     *
     * Write review book
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  string $book_id bookId is _id from book object (required)
     * @param  int $rating rating 1 2 3 4 5 (required)
     * @param  string $note (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reviewBookShelfAsyncWithHttpInfo($platform, $x_access_token, $x_user, $book_id, $rating, $note, $lang = 'th')
    {
        $returnType = '\Swagger\Client\Model\SuccessResponse';
        $request = $this->reviewBookShelfRequest($platform, $x_access_token, $x_user, $book_id, $rating, $note, $lang);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reviewBookShelf'
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  string $book_id bookId is _id from book object (required)
     * @param  int $rating rating 1 2 3 4 5 (required)
     * @param  string $note (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reviewBookShelfRequest($platform, $x_access_token, $x_user, $book_id, $rating, $note, $lang = 'th')
    {
        // verify the required parameter 'platform' is set
        if ($platform === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $platform when calling reviewBookShelf'
            );
        }
        // verify the required parameter 'x_access_token' is set
        if ($x_access_token === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_access_token when calling reviewBookShelf'
            );
        }
        // verify the required parameter 'x_user' is set
        if ($x_user === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user when calling reviewBookShelf'
            );
        }
        // verify the required parameter 'book_id' is set
        if ($book_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $book_id when calling reviewBookShelf'
            );
        }
        // verify the required parameter 'rating' is set
        if ($rating === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rating when calling reviewBookShelf'
            );
        }
        // verify the required parameter 'note' is set
        if ($note === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $note when calling reviewBookShelf'
            );
        }

        $resourcePath = '/reviews/book';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($platform !== null) {
            $headerParams['platform'] = ObjectSerializer::toHeaderValue($platform);
        }
        // header params
        if ($x_access_token !== null) {
            $headerParams['x-access-token'] = ObjectSerializer::toHeaderValue($x_access_token);
        }
        // header params
        if ($x_user !== null) {
            $headerParams['x-user'] = ObjectSerializer::toHeaderValue($x_user);
        }
        // header params
        if ($lang !== null) {
            $headerParams['lang'] = ObjectSerializer::toHeaderValue($lang);
        }


        // form params
        if ($book_id !== null) {
            $formParams['bookId'] = ObjectSerializer::toFormValue($book_id);
        }
        // form params
        if ($rating !== null) {
            $formParams['rating'] = ObjectSerializer::toFormValue($rating);
        }
        // form params
        if ($note !== null) {
            $formParams['note'] = ObjectSerializer::toFormValue($note);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchBook
     *
     * Search book
     *
     * @param  string $platform platform (required)
     * @param  string $text_search text_search (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\BookSearchResponse
     */
    public function searchBook($platform, $text_search, $lang = 'th')
    {
        list($response) = $this->searchBookWithHttpInfo($platform, $text_search, $lang);
        return $response;
    }

    /**
     * Operation searchBookWithHttpInfo
     *
     * Search book
     *
     * @param  string $platform platform (required)
     * @param  string $text_search (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\BookSearchResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchBookWithHttpInfo($platform, $text_search, $lang = 'th')
    {
        $returnType = '\Swagger\Client\Model\BookSearchResponse';
        $request = $this->searchBookRequest($platform, $text_search, $lang);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\BookSearchResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SystemError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchBookAsync
     *
     * Search book
     *
     * @param  string $platform platform (required)
     * @param  string $text_search (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchBookAsync($platform, $text_search, $lang = 'th')
    {
        return $this->searchBookAsyncWithHttpInfo($platform, $text_search, $lang)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchBookAsyncWithHttpInfo
     *
     * Search book
     *
     * @param  string $platform platform (required)
     * @param  string $text_search (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchBookAsyncWithHttpInfo($platform, $text_search, $lang = 'th')
    {
        $returnType = '\Swagger\Client\Model\BookSearchResponse';
        $request = $this->searchBookRequest($platform, $text_search, $lang);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchBook'
     *
     * @param  string $platform platform (required)
     * @param  string $text_search (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchBookRequest($platform, $text_search, $lang = 'th')
    {
        // verify the required parameter 'platform' is set
        if ($platform === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $platform when calling searchBook'
            );
        }
        // verify the required parameter 'text_search' is set
        if ($text_search === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $text_search when calling searchBook'
            );
        }

        $resourcePath = '/books/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($platform !== null) {
            $headerParams['platform'] = ObjectSerializer::toHeaderValue($platform);
        }
        // header params
        if ($lang !== null) {
            $headerParams['lang'] = ObjectSerializer::toHeaderValue($lang);
        }


        // form params
        if ($text_search !== null) {
            $formParams['textSearch'] = ObjectSerializer::toFormValue($text_search);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchBookShelf
     *
     * Search book shelf
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  string $text_search textSearch for search (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\BookResponse
     */
    public function searchBookShelf($platform, $x_access_token, $x_user, $text_search, $lang = 'th')
    {
        list($response) = $this->searchBookShelfWithHttpInfo($platform, $x_access_token, $x_user, $text_search, $lang);
        return $response;
    }

    /**
     * Operation searchBookShelfWithHttpInfo
     *
     * Search book shelf
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  string $text_search textSearch for search (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\BookResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchBookShelfWithHttpInfo($platform, $x_access_token, $x_user, $text_search, $lang = 'th')
    {
        $returnType = '\Swagger\Client\Model\BookResponse';
        $request = $this->searchBookShelfRequest($platform, $x_access_token, $x_user, $text_search, $lang);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\BookResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\NotAuthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SystemError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchBookShelfAsync
     *
     * Search book shelf
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  string $text_search textSearch for search (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchBookShelfAsync($platform, $x_access_token, $x_user, $text_search, $lang = 'th')
    {
        return $this->searchBookShelfAsyncWithHttpInfo($platform, $x_access_token, $x_user, $text_search, $lang)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchBookShelfAsyncWithHttpInfo
     *
     * Search book shelf
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  string $text_search textSearch for search (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchBookShelfAsyncWithHttpInfo($platform, $x_access_token, $x_user, $text_search, $lang = 'th')
    {
        $returnType = '\Swagger\Client\Model\BookResponse';
        $request = $this->searchBookShelfRequest($platform, $x_access_token, $x_user, $text_search, $lang);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchBookShelf'
     *
     * @param  string $platform platform (required)
     * @param  string $x_access_token access token after user login (required)
     * @param  string $x_user username or email for check log (required)
     * @param  string $text_search textSearch for search (required)
     * @param  string $lang lang is th or en (optional, default to th)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchBookShelfRequest($platform, $x_access_token, $x_user, $text_search, $lang = 'th')
    {
        // verify the required parameter 'platform' is set
        if ($platform === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $platform when calling searchBookShelf'
            );
        }
        // verify the required parameter 'x_access_token' is set
        if ($x_access_token === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_access_token when calling searchBookShelf'
            );
        }
        // verify the required parameter 'x_user' is set
        if ($x_user === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_user when calling searchBookShelf'
            );
        }
        // verify the required parameter 'text_search' is set
        if ($text_search === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $text_search when calling searchBookShelf'
            );
        }

        $resourcePath = '/books/shelf/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($platform !== null) {
            $headerParams['platform'] = ObjectSerializer::toHeaderValue($platform);
        }
        // header params
        if ($x_access_token !== null) {
            $headerParams['x-access-token'] = ObjectSerializer::toHeaderValue($x_access_token);
        }
        // header params
        if ($x_user !== null) {
            $headerParams['x-user'] = ObjectSerializer::toHeaderValue($x_user);
        }
        // header params
        if ($lang !== null) {
            $headerParams['lang'] = ObjectSerializer::toHeaderValue($lang);
        }


        // form params
        if ($text_search !== null) {
            $formParams['textSearch'] = ObjectSerializer::toFormValue($text_search);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
